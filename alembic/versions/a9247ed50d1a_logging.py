"""logging

Revision ID: a9247ed50d1a
Revises: 80ed9be53b2f
Create Date: 2024-12-18 02:38:11.534456

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a9247ed50d1a'
down_revision: Union[str, None] = '80ed9be53b2f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('main_log', 'operation_date')

    conn = op.get_bind()
    conn.execute(sa.text("DROP TRIGGER IF EXISTS report_change ON report;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS call_change ON call;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS status_call_change ON statuscall;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS cars_change ON cars;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS brigades_change ON brigades;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS compositions_brigades_change ON compositionsbrigades;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS users_change ON users;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS main_log_change ON main_log;"))
    conn.execute(sa.text("DROP TRIGGER IF EXISTS secret_data_change ON secret_data;"))

    conn.execute(sa.text("""
        CREATE OR REPLACE FUNCTION logging() RETURNS TRIGGER AS $logging$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        INSERT INTO public.main_log (operation_type, user_operator, changed_data) 
        VALUES ('D', current_user, row_to_json(OLD));
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO public.main_log (operation_type, user_operator, changed_data) 
        VALUES ('U', current_user, row_to_json(NEW));
    ELSIF (TG_OP = 'INSERT') THEN
        INSERT INTO public.main_log (operation_type, user_operator, changed_data) 
        VALUES ('I', current_user, row_to_json(NEW));
    END IF;
    RETURN NULL;    
END;
$logging$ LANGUAGE plpgsql;
        """))

    # Триггер для ReportOrm
    conn.execute(sa.text("""
            CREATE TRIGGER logging_exec_reports
AFTER INSERT OR UPDATE OR DELETE ON public.report
FOR EACH ROW EXECUTE FUNCTION logging();
            """))

    # Триггер для CallOrm +
    conn.execute(sa.text("""
            CREATE TRIGGER logging_exec_calls
AFTER INSERT OR UPDATE OR DELETE ON public.call
FOR EACH ROW EXECUTE FUNCTION logging();
            """))

    # Триггер для StatusCallOrm
    conn.execute(sa.text("""
            CREATE TRIGGER logging_exec_call_statuses
AFTER INSERT OR UPDATE OR DELETE ON public.statuscall
FOR EACH ROW EXECUTE FUNCTION logging();
            """))

    # Триггер для CarsOrm +
    conn.execute(sa.text("""
            CREATE TRIGGER logging_exec_vehicles
AFTER INSERT OR UPDATE OR DELETE ON public.cars
FOR EACH ROW EXECUTE FUNCTION logging();
            """))

    # Триггер для BrigadesOrm
    conn.execute(sa.text("""
            CREATE TRIGGER logging_exec_brigades
AFTER INSERT OR UPDATE OR DELETE ON public.brigades
FOR EACH ROW EXECUTE FUNCTION logging();
            """))

    # Триггер для CompositionsBrigadesOrm
    conn.execute(sa.text("""
            CREATE TRIGGER logging_exec_brigades
AFTER INSERT OR UPDATE OR DELETE ON public.compositionsbrigades
FOR EACH ROW EXECUTE FUNCTION logging();
            """))

    # Триггер для UsersOrm
    conn.execute(sa.text("""
            CREATE TRIGGER logging_exec_users
AFTER INSERT OR UPDATE OR DELETE ON public.users
FOR EACH ROW EXECUTE FUNCTION logging();
            """))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('main_log', sa.Column('operation_date', sa.VARCHAR(), autoincrement=False, nullable=False))

    conn = op.get_bind()
    conn.execute(sa.text("""
        CREATE OR REPLACE FUNCTION log_changes()
        RETURNS TRIGGER AS $$
        BEGIN
            IF TG_OP = 'INSERT' THEN
                INSERT INTO main_log (operation_type, user_operator, changed_data)
                VALUES ('INSERT', SESSION_USER, ROW(NEW.*)::TEXT);
            ELSIF TG_OP = 'UPDATE' THEN
                INSERT INTO main_log (operation_type, user_operator, changed_data)
                VALUES ('UPDATE', SESSION_USER, ROW(OLD.*, NEW.*)::TEXT);
            ELSIF TG_OP = 'DELETE' THEN
                INSERT INTO main_log (operation_type, user_operator, changed_data)
                VALUES ('DELETE', SESSION_USER, ROW(OLD.*)::TEXT);
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """))

    # Триггер для ReportOrm
    conn.execute(sa.text("""
        CREATE TRIGGER report_change
        AFTER INSERT OR UPDATE OR DELETE ON report
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для CallOrm
    conn.execute(sa.text("""
        CREATE TRIGGER call_change
        AFTER INSERT OR UPDATE OR DELETE ON call
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для StatusCallOrm
    conn.execute(sa.text("""
        CREATE TRIGGER status_call_change
        AFTER INSERT OR UPDATE OR DELETE ON statuscall
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для CarsOrm
    conn.execute(sa.text("""
        CREATE TRIGGER cars_change
        AFTER INSERT OR UPDATE OR DELETE ON cars
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для BrigadesOrm
    conn.execute(sa.text("""
        CREATE TRIGGER brigades_change
        AFTER INSERT OR UPDATE OR DELETE ON brigades
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для CompositionsBrigadesOrm
    conn.execute(sa.text("""
        CREATE TRIGGER compositions_brigades_change
        AFTER INSERT OR UPDATE OR DELETE ON compositionsbrigades
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для UsersOrm
    conn.execute(sa.text("""
        CREATE TRIGGER users_change
        AFTER INSERT OR UPDATE OR DELETE ON users
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для main_log (обычно логи не логируются, но для примера мы оставим их здесь)
    conn.execute(sa.text("""
        CREATE TRIGGER main_log_change
        AFTER INSERT OR UPDATE OR DELETE ON main_log
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))

    # Триггер для secret_data (обычно логи не логируются, но для примера мы оставим их здесь)
    conn.execute(sa.text("""
        CREATE TRIGGER secret_data_change
        AFTER INSERT OR UPDATE OR DELETE ON secret_data
        FOR EACH ROW EXECUTE FUNCTION log_changes();
        """))
    # ### end Alembic commands ###
